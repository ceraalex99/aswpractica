openapi: 3.0.1
info:
  version: 1.0.0
  title: Hacker News
  description: "This is the Open API documentation for the REST API of our beloved application **Hacker News** deployed at <https://asw-practica.herokuapp.com/>. <br>All operations are executable. All operations require authentication. You must **Authorize** your requests by providing the api_key vaule from your user account."
servers:
  - url: 'https://asw-practica.herokuapp.com/api/'
paths:
  /posts:
    post:
      tags:
      - posts
      summary: Adds a new Post
      operationId: addPost
      requestBody:
        description: Provide the title & url or text of your post
        content:
          application/json:
            schema:
              required:
              - title
              type: object
              properties:
                title:
                  type: string
                  example: 'A title'
                url:
                  type: string
                  example: 'https://github.com'
                  
                text:
                  type: string
                  example: 'My text'
            example:
              title: 'A title'
              text: 'My text'
                  
        required: true
      responses:
        201:
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        302:
          description: Post with the url provided exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: 'Error: Bad Request'
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}  
        
    get:
      tags:
      - posts
      summary: Retrieves all the url posts
      operationId: getUrlPosts
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              example:
              - id: 4
                title: 'A title'
                url: 'http://www.example.com'
                created_at: '2020-05-05T19:26:04.977Z'
                user_id: 1
                author: 'Antonio'
                tipo: 'url'
                points: 1
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
  /posts/ask:
    get:
      tags:
      - posts
      summary: Retrieves all the ask posts
      operationId: getAskPosts
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              example:
              - id: 2
                title: 'A title'
                text: 'My text'
                created_at: '2020-05-05T19:26:04.977Z'
                user_id: 1
                author: 'Antonio'
                tipo: 'ask'
                points: 1
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
  /posts/newest:
    get:
      tags:
      - posts
      summary: Retrieves all posts ordered by time
      operationId: getNewestPosts
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {} 
  /posts/{postId}:
    get:
      tags:
      - posts
      summary: Finds a post by its ID
      description: Returns a single Post
      operationId: getPostById
      parameters:
      - name: postId
        in: path
        description: ID of post to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
    put:
      tags:
      - posts
      summary: Modifies a post
      description: modifies a single Post
      operationId: updatePost
      parameters:
      - name: postId
        in: path
        description: ID of post to update
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Provide the title & url or text of your post
        content:
          application/json:
            schema:
              required:
              - title
              type: object
              properties:
                title:
                  type: string
                  example: 'A title'
                url:
                  type: string
                  example: 'https://github.com'
                  
                text:
                  type: string
                  example: 'My text'
            example:
              title: 'A title'
              text: 'My text'
                  
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        403:
          description: 'Error: Forbidden'
          content:
            application/json: {}
          
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
    delete:
      tags:
      - posts
      summary: Deletes a post
      operationId: deletePost
      parameters:
      - name: postId
        in: path
        description: Post id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Post deleted
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        403:
          description: 'Error: Forbidden'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /posts/{postId}/like:
    post:
      tags:
      - posts
      summary: Likes a post
      operationId: likePost
      parameters:
      - name: postId
        in: path
        description: Post id to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Liked post
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
    delete:
      tags:
      - posts
      summary: Unlikes a post
      operationId: unlikePost
      parameters:
      - name: postId
        in: path
        description: Post id to unlike
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Unliked post
          content:
            application/json: {}
        400:
          description: 'Error: Bad Request'
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /posts/{postId}/comments:
    get:
      tags:
      - posts
      summary: retrieve all comments from a post
      operationId: getCommentsPost
      parameters:
      - name: postId
        in: path
        description: Post id to retrieve comments from
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content: 
            application/json: {}
  /comments:
    post:
      tags:
      - comments
      summary: creates a comment
      operationId: addComment
      requestBody:
        description: Provide the text and the post_id of your comment
        content:
          application/json:
            schema:
              required:
              - text
              - post_id
              type: object
              properties:
                text:
                  type: string
                  example: 'My text'
                post_id:
                  type: integer
                  format: int64
                  example: 2
        required: true
      responses:
        201:
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        400:
          description: 'Error: Bad Request'
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
  /comments/{commentId}:
    get:
      tags:
      - comments
      summary: Finds a comment by its ID
      description: Returns a single comment
      operationId: getCommentById
      parameters:
      - name: commentId
        in: path
        description: ID of comment to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
    delete:
      tags:
      - comments
      summary: Deletes a comment
      operationId: deleteComment
      parameters:
      - name: commentId
        in: path
        description: Comment id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Comment deleted
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        403:
          description: 'Error: Forbidden'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /comments/{commentId}/like:
    post:
      tags:
      - comments
      summary: Likes a comment
      operationId: likeComment
      parameters:
      - name: commentId
        in: path
        description: Comment to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Liked comment
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
    delete:
      tags:
      - comments
      summary: Unlikes a comment
      operationId: unlikeComment
      parameters:
      - name: commentId
        in: path
        description: Comment id to unlike
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Unliked comment
          content:
            application/json: {}
        400:
          description: 'Error: Bad Request'
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /comments/{commentId}/replies:
    get:
      tags:
      - comments
      summary: retrieve all replies from a comment
      operationId: getRepliesComment
      parameters:
      - name: commentId
        in: path
        description: Comment id to retrieve replies from
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reply'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content: 
            application/json: {}
  /replies:
    post:
      tags:
      - replies
      summary: creates a reply
      operationId: addReply
      requestBody:
        description: Provide the text and the id of the parent of your reply
        content:
          application/json:
            schema:
              required:
              - text
              - contribution_id
              type: object
              properties:
                text:
                  type: string
                  example: 'My text'
                contribution_id:
                  type: integer
                  format: int64
                  example: 3
        required: true
      responses:
        201:
          description: Reply created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        400:
          description: 'Error: Bad Request'
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
  /replies/{replyId}:
    get:
      tags:
      - replies
      summary: Finds a reply by its ID
      description: Returns a single reply
      operationId: getReplyById
      parameters:
      - name: replyId
        in: path
        description: ID of reply to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reply'
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
    delete:
      tags:
      - replies
      summary: Deletes a reply
      operationId: deleteReply
      parameters:
      - name: replyId
        in: path
        description: Reply id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Reply deleted
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        403:
          description: 'Error: Forbidden'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /replies/{replyId}/like:
    post:
      tags:
      - replies
      summary: Likes a reply
      operationId: likeReply
      parameters:
      - name: replyId
        in: path
        description: Reply id to like
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Liked reply
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
    delete:
      tags:
      - replies
      summary: Unlikes a reply
      operationId: unlikeReply
      parameters:
      - name: replyId
        in: path
        description: Reply id to unlike
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Unliked reply
          content:
            application/json: {}
        400:
          description: 'Error: Bad Request'
          content:
            application/json: {}
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /replies/{replyId}/replies:
    get:
      tags:
      - replies
      summary: retrieve all replies from a reply
      operationId: getRepliesReply
      parameters:
      - name: replyId
        in: path
        description: Reply id to retrieve replies from
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reply'
        401:
          description: 'Error: Unauthorized'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content: 
            application/json: {}
  /users/{userId}:
    get:
      tags:
      - users
      summary: gets a user
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: User id to retrieve
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
    put:
      tags:
      - users
      summary: modifies a user
      operationId: updateUser
      parameters:
      - name: userId
        in: path
        description: User id to modify
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        403:
          description: 'Error: Forbidden'
          content:
            application/json: {}
          
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /users/{userId}/submissions:
    get:
      tags:
      - users
      summary: Retrieves all the posts from a user
      operationId: getUserSubmissions
      parameters:
      - name: userId
        in: path
        description: ID of user to return posts from
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              example:
              - id: 4
                title: 'A title'
                url: 'http://www.example.com'
                created_at: '2020-05-05T19:26:04.977Z'
                user_id: 1
                author: 'Antonio'
                tipo: 'url'
                points: 1
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /users/{userId}/comments:
    get:
      tags:
      - users
      summary: Retrieves all the comments from a user
      operationId: getUserComments
      parameters:
      - name: userId
        in: path
        description: ID of user to return comments from
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interaction'
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /users/{userId}/upvoted_submissions:
    get:
      tags:
      - users
      summary: Retrieves all the posts upvoted by a user
      operationId: getUserUpvotedSubmissions
      parameters:
      - name: userId
        in: path
        description: ID of user to return posts by
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
              example:
              - id: 4
                title: 'A title'
                url: 'http://www.example.com'
                created_at: '2020-05-05T19:26:04.977Z'
                user_id: 1
                author: 'Antonio'
                tipo: 'url'
                points: 1
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        403:
          description: 'Error: Forbidden'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
  /users/{userId}/upvoted_comments:
    get:
      tags:
      - users
      summary: Retrieves all the comments upvoted by a user
      operationId: getUserUpvotedComments
      parameters:
      - name: userId
        in: path
        description: ID of user to return upvoted comments by
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interaction'
        401:
          description: 'Error: api-key not provided or not existent'
          content:
            application/json: {}
        403:
          description: 'Error: Forbidden'
          content:
            application/json: {}
        404:
          description: 'Error: Not Found'
          content:
            application/json: {}
security:
 - ApiKeyAuth: []
components:
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        title:
          type: string
          example: 'A title'
        text:
          type: string
          example: 'My text'
        url:
          type: string
          format: url
        created_at:
          type: string
          format: date-time
        user_id:
          type: integer
          format: int64
          example: 1
        author:
          type: string
        tipo:
          type: string
          enum: [url, ask]
        points:
          type: integer
          format: int64
          example: 1
      example:
        id: 2
        title: 'A title'
        text: 'My text'
        created_at: '2020-05-05T19:26:04.977Z'
        user_id: 1
        author: 'Antonio'
        tipo: 'ask'
        points: 1
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        text:
          type: string
          example: 'My text'
        created_at:
          type: string
          format: date-time
        user_id:
          type: integer
          format: int64
          example: 1
        post_id:
          type: integer
          format: int64
        author:
          type: string
        points:
          type: integer
          format: int64
          example: 1
      example:
        id: 3
        text: 'My text'
        created_at: '2020-05-05T19:26:04.977Z'
        user_id: 1
        post_id: 2
        author: 'Antonio'
        points: 1
    Interaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        text:
          type: string
          example: 'My text'
        created_at:
          type: string
          format: date-time
        user_id:
          type: integer
          format: int64
          example: 1
        post_id:
          type: integer
          format: int64
        author:
          type: string
        points:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          enum: [comment, reply]
        contribution_id:
          type: integer
          format: int64
      example:
        id: 5
        text: 'My text'
        created_at: '2020-05-05T19:26:04.977Z'
        user_id: 1
        post_id: 2
        author: 'Antonio'
        points: 1
        type: reply
        contribution_id: 3
    Reply:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 2
        text:
          type: string
          example: 'My text'
        created_at:
          type: string
          format: date-time
        user_id:
          type: integer
          format: int64
          example: 1
        post_id:
          type: integer
          format: int64
        author:
          type: string
        points:
          type: integer
          format: int64
          example: 1
        contribution_id:
          type: integer
          format: int64
      example:
        id: 5
        text: 'My text'
        created_at: '2020-05-05T19:26:04.977Z'
        user_id: 1
        post_id: 2
        author: 'Antonio'
        points: 1
        contribution_id: 3
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Antonio
        created_at:
          type: string
          format: date-time
        karma:
          type: integer
          format: int64
        about:
          type: string
        google_id:
          type: integer
          format: int64
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: Authorization
      in: header
